<?php
// $Id$

/**
 * @file
 * Imports users from a coma seperated file (csv).
 */

/**
 * Implementation of hook_help().
 */
function user_import_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Imports users from a coma seperated file (csv).');
    case 'node/add#user_import':
      return t('Advertise skills and expertise you are looking for.');
    case 'admin/settings/user_import':
      return t('Imports users from a coma seperated file (csv).');
  }
}


/**
 * Implementation of hook_perm().
 */
function user_import_perm() {
  return array('import users');
}


/**
 * Implementation of hook_menu().
 */
function user_import_menu($may_cache) {
  
  global $user;
  $items = array();
  
     if ($may_cache) {     
     
        $items[] = array(
            'path' => 'admin/settings/user_import', 
            'title' => t('user imports'), 
            'callback' => 'user_import_callback_overview',
            'access' => user_access('import users'),
            );
        $items[] = array(
            'path' => 'admin/settings/user_import/list', 
            'title' => t('list imports'), 
            'type' => MENU_DEFAULT_LOCAL_TASK, 
            'access' => user_access('import users'),
            'weight' => -10
            );
        $items[] = array(
          'path' => 'admin/settings/user_import/add', 
          'title' => t('add import'),
          'callback' => 'user_import_callback_add',
          'access' => user_access('import users'),
          'type' => MENU_LOCAL_TASK
        );
        $items[] = array(
          'path' => 'admin/settings/user_import/configure', 
          'title' => t('configure'),
          'callback' => 'user_import_callback_configure',
          'access' => user_access('import users'),
          'type' => MENU_LOCAL_TASK
        );
        $items[] = array(
          'path' => 'admin/settings/user_import/errors', 
          'callback' => 'user_import_callback_errors',
          'access' => user_access('import users'),
          'type' => MENU_CALLBACK
        );     }

  return $items;
}

function user_import_callback_overview() {

    $edit = $_POST["edit"];
    $operation = $_POST["op"];
    
    switch ($operation) {
        case t('Settings'):
            drupal_goto ('admin/settings/user_import/add/' . $edit['iid']);
            break;
            
        case t('Delete'):
            db_query("DELETE FROM {user_import} WHERE iid = '%d'", $edit['iid']);
            db_query("DELETE FROM {user_import_errors} WHERE iid = '%d'", $edit['iid']);
            $message = t("Import has been cancelled.");
            $file = file_check_upload($edit['file_handle']);
            if ($file) {
                file_delete($file->filepath);
                $message .= ' ' . t("File '$file->filename' has been deleted.");
                Unset($file);
            }
            
            drupal_set_message ($message);
            break;
            
        case t('Continue Processing'):
            $import = user_import_select_imports($edit['iid']);
            user_import_process($import);
            break;
    }

    $imports = user_import_select_imports();
    
    if ($imports) {
        foreach ($imports as $import) {
            $row = NULL;
            $file = file_check_upload($import['file_handle']);
            $import_label = ($import['setting'] == 'tested' || $import['setting'] == 'test') ? t('importable') : t('imported');
            $header = array(t('filename'), t('date'), t('processed'), $import_label, t('errors'), t('mode'));
            $errors = db_result(db_query("SELECT COUNT(iid) FROM {user_import_errors} WHERE iid = '%d'", $import['iid']));
            $errors_link = ($errors == 0) ? 0: l($errors, 'admin/settings/user_import/errors/' . $import['iid']);
            $row = array(array( 
                array("data" => $file->filename, "align" => 'left'),  
                array("data" => format_date($import['started'], 'small'), "align" => 'left'), 
                array("data" => $import['processed'], "align" => 'center'),
                array("data" => $import['valid'], "align" => 'center'),
                array("data" => $errors_link, "align" => 'center'),
                array("data" => $import['setting'], "align" => 'center'),
            ));
            
            $form = theme('table', $header, $row);
    
            $form .= form_hidden ('iid' , $import['iid']);
            $form .= form_submit(t('Continue Processing'));
            $form .= form_submit(t('Settings'));
            $form .= form_submit(t('Delete'));
            
            $output .= form($form);
        }
    }
    
    print theme('page', $output);

    return;
}


function user_import_callback_add($iid = NULL) {

    $edit = $_POST["edit"];
    $operation = $_POST["op"];

    $file_name = ($edit['file_handle']) ? $edit['file_handle'] : 'csv_' . time();  
    $file = file_check_upload($file_name);
   
    switch ($operation) {
        case t('Test'):
            _user_import_validate_add($edit);
    
            if (!form_get_errors()) {
                
                $edit['setting'] = 'test';
                user_import_process($edit);
                drupal_set_message (t('Tested'));
                drupal_goto ('admin/settings/user_import/list');
            }
            break;
            
        case t('Import'):    
            _user_import_validate_add($edit);
            
            if (!form_get_errors()) {
                $edit['setting'] = 'import';
                user_import_process($edit);
                drupal_set_message (t('Imported'));
                drupal_goto ('admin/settings/user_import/list');
            }
            break;  
            
        case t('Upload'):  
            $file = file_save_upload($file_name);
            // TO DO
            // currently function screws up line endings
            // user_import_file_cleaner($file->filepath);
            break;
            
        case t('Remove file'):
            if ($file) {
                file_delete($file->filepath);
                Unset($file);
            }
            break;
        default:
            if ($iid) {
                // user is comming from list view
                // load info for this import
                $edit = user_import_select_imports($iid);
                $file_name = ($edit['file_handle']) ? $edit['file_handle'] : 'csv_' . time();  
                $file = file_check_upload($file_name);
                $options .= form_hidden ('iid', $iid);
            }
            break;
        }
    
    // Upload file form
    if (!$file) {
        $upload .= form_hidden ('send_email' , 1);
        $upload .= form_hidden ('contact' , 1);
        $upload .= form_hidden ('roles][2', 1);
        $upload .= form_hidden ('file_handle' , $file_name);
        $upload .= form_hidden ('file_handle' , $file_name);
        $upload .= form_file(t('CSV File'), $file_name, 50, t('Upload the CSV file to be imported.'), TRUE);
        $upload  .= form_submit(t('Upload'));
        $output  .= form_group(t('Step 1: Upload a CSV file'), $upload);
        
        print theme('page', form($output, 'post', 0, array("enctype" => "multipart/form-data")));
        return;
    }
    
    // Process file form
    $remove .= form_item(t('Uploaded file'), sprintf("%s (%d Bytes)", $file->filename, $file->filesize));
    $remove .= form_submit(t('Remove file'));
    $remove = form_group(t('CSV file'), $remove, t('Remove file to use a different file.'));
    $output .= form($remove);
    
    
    // check file exists
    $handle = @fopen($file->filepath, "r");
    if (!$handle) {
        drupal_set_message (t("Could not find the csv file '%filename'", array('%filename' => $file->filename)), 'error');
        return print theme('page', t("Please add your file again."));
    }
    
    // get first row of file
    $data_row = @fgetcsv ($handle, 1000000, ",");
    if (!$data_row) {
        drupal_set_message (t("Could not get data, the file '%filename' is either empty or has incompatible line endings.", array('%filename' => $file->filename)), 'error');
        return print theme('page', t("Check the contents of the file '%filename'.", array('%filename' => $file->filename)));
    }
    
    // get profile fields
    $profile_fields = user_import_profile_fields();
    
    // add default and email address options
    $profile_fields[0] = '-------------';
    $profile_fields['email'] = t('Email Address') . '*';
    $profile_fields['password'] = t('Password');
    asort($profile_fields);  
    
    $column = 0;
    $sort = array(t('no'), 1, 2, 3, 4);
    
    foreach($data_row as $data_cell) {
            
            $info = substr($data_cell, 0, 40);
            
            $field_match_rows[] = array( 
                                array("data" => $info, "align" => "left"), 
                                array("data" => form_select(NULL, 'field_match][' . $column, $edit['field_match'][$column], $profile_fields), "align" => "left"),
                                array("data" => form_select(NULL, 'username][' . $column, $edit['username'][$column], $sort), "align" => "center"),
                                array("data" => form_checkbox(NULL, 'abbreviate][' . $column, 1, $edit['abbreviate'][$column]), "align" => "center")
                            );
            
            $column++;
    }
    
    $options .= form_hidden ('file_handle' , $file_name);
    $options .= form_checkbox(t('Ignore First Line'), 'first_line', 1, $edit['first_line'], t("If the first line is the names of the data columns, set to ignore first line."));
    $options .= form_checkbox(t('Contact'), 'contact', 1, $edit['contact'], t("Set each user's personal contact form to 'allowed'."));
    $options .= form_checkbox(t('Send Email'), 'send_email', 1, $edit['send_email'], t('Send email to users when their account is created.'));
    $options = form_group(t('Options'), $options);
    
    $field_match_header = array(t('csv column'), t('Drupal fields'), t('username'), t('abbreviate'));
    $fieldmatch .= theme('table', $field_match_header, $field_match_rows, array('id' => 'select-match'));
    $group_text = t("Match columns in CSV file to profile fields, leave as '----' if there is no match.");
    $group_text .= '<br /><strong>' . t('Username') . ': </strong>' . t("The Username will be built from CSV columns in the order selected.");
    $group_text .= '<br /><strong>' . t('Abbreviate') . ': </strong>' . t("Use the first letter of a field in uppercase for the Username, e.g. 'john' -> 'J'.");
    $group_text .= '<br />' . t("If no CSV fields are selected, the Username will be randomly generated.");
    $options .= form_group(t('Field Match'), $fieldmatch, $group_text);    
     

    $roles_data = user_roles();

    while (list ($rid, $role_name) = each ($roles_data)) {
        if ($rid != 1) $roles .= form_checkbox($role_name, 'roles][' . $rid, 1, $edit['roles'][$rid]);
    }

    $options .= form_group(t('Role Assign'), $roles, t('Select which role(s) imported users should be assigned.')); 

    $options .= form_submit(t('Test'));
    $options.= form_submit(t('Import'));
    
    $output .= form($options, 'post', NULL, array('id' => 'user-import'));
    
    print theme('page', $output);
    return;
}


function user_import_callback_errors($iid = NULL) {

    if (!$iid) drupal_goto('admin/settings/user_import');
    
    // get profile fields
    $profile_fields = user_import_profile_fields();
    
    // add email address options
    $profile_fields['email'] = t('Email Address') . '*';
    asort($profile_fields);
    
    $settings = user_import_select_imports($iid);

    foreach($settings['field_match'] as $field) {     
        if ($field != '0') $header[] = $profile_fields[$field];
    }
 
    $results = db_query("SELECT * FROM {user_import_errors} WHERE iid = '%d'", $iid);
    while ($row = db_fetch_array($results)) {
        $row['data'] = unserialize($row['data']);
        $file_lines[] = $row;
    }

    foreach ($file_lines as $file_line) {

        $row = NULL;
        foreach($file_line['data'] as $file_cell) {
            $row[] = array("data" => substr($file_cell, 0, 40), "align" => "left");
        }
        
        $row[] = $file_line['error'];
        $rows[] = $row;
    }
  
    $header[] = t('error');
    
    $output .= theme('table', $header, $rows);    
    print theme('page', $output);
    return;
}

function user_import_callback_configure() { 
    
    $edit = $_POST["edit"];
    $operation = $_POST["op"];
    
    switch ($operation) {
        case t('Save'):
            $user_import_max = user_import_validate_maximum($edit['user_import_max']);
            variable_set('user_import_max', $user_import_max);
            if (!form_get_errors()) drupal_set_message(t("Settings have been saved."));
            break;
        
        default:
            $user_import_max = variable_get('user_import_max', 250);
            break;
    }
    
    $form .= form_textfield(t('Maximum Users/Process'), 'user_import_max', $user_import_max, 10, 10, t('Maximum number of users to import each time the file is processed, useful for controling the rate at which emails are sent out.'));
    $form .= form_submit(t('Save'));
    $output .= form($form);
    
    print theme('page', $output);
    return;
}


// Create Username    
function user_import_create_username($order, $data, $abbreviate) {

    if ($data) {
    
        asort($order);
        reset($order);
    
        while (list ($file_column, $sequence) = each ($order)) {
            
            $username .= ($abbreviate[$file_column] == 1) ? trim(strtoupper(chr(ord($data[$file_column])))) : trim($data[$file_column]);
        }

    } else {
        $username = user_import_random_username();
    }
    
    $exists_username = user_import_validate_username($username);
    
    // add number at end of username if it already exists
    if ($exists_username) {

        $count = user_import_count_usernames($username);
        $count++;
        $username = $username . $count;
    }
    
    return $username;
}
    
// Check for a duplicate in Username    
function user_import_validate_username($username) {

    $result = db_result(db_query("SELECT uid from {users} where name = '%s' LIMIT 1", $username));
    return $result ;
}

function user_import_count_usernames($username) {

    $result = db_result(db_query("SELECT COUNT(uid) from {users} where name LIKE '%s%s'", $username, '%'));
    return $result ;
}

// Check for a duplicate email address
function user_import_validate_email($email = NULL) {

    if (!$email) return 'no email';
    
    if (!valid_email_address($email)) return 'invalid email';
    
    $result = db_result(db_query("SELECT uid from {users} where mail= '%s' LIMIT 1", $email));
    if ($result) return 'duplicate email';
 
    return;
}


function user_import_insert_profile($field, $uid, $value) {
    
    $profile = db_query("INSERT INTO {profile_values} (fid,uid,value) VALUES('%d','%d','%s')", $field, $uid, $value);
    return;
}

// A custom theme function.
function theme_user_import_duplicates_table($rows) {

    $header = array(t('first name'), t('last name'), t('email'));
    $output = theme('table', $header, $rows, array('id' => 'enewsletter-admin'));
    return $output;
}

// A custom theme function.
function theme_user_import_duplicate($user_data) {

    foreach ($user_data as $data) {
        $row[] = array('data' => $data, 'align' => 'left');
    }

    return $row;
}

// Send email when account is created    
function user_import_send_email($account, $pass) {

    global $base_url;
    $from = variable_get('site_mail', ini_get('sendmail_from'));

    $variables = array('%username' => $account->name, '%site' => variable_get('site_name', 'drupal'), '%password' => $pass, '%uri' => $base_url, '%uri_brief' => substr($base_url, strlen('http://')), '%mailto' => $account->mail, '%date' => format_date(time()), '%login_uri' => url('user', NULL, NULL, TRUE), '%edit_uri' => url('user/'. $account->uid .'/edit', NULL, NULL, TRUE));

    $subject = _user_mail_text('welcome_subject', $variables);
    $body = _user_mail_text('welcome_body', $variables);
    user_mail($account->mail, $subject, $body, "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
    return;
}

function user_import_profile_fields() {
    
    if (!module_exist('profile')) return;
    
    $results = db_query("SELECT DISTINCT(fid), title FROM {profile_fields}");

    while ($row = db_fetch_object($results)) {
        $profile_fields[$row->fid] = $row->title;
    }
    
    return $profile_fields;
}


function user_import_list_profile_fields($return = 'string') {
    
    if (!module_exist('profile')) return;
    
    $results = db_query("SELECT DISTINCT(fid), title, name FROM {profile_fields}");

    while ($row = db_fetch_object($results)) {
        $profile_fields[$row->fid] = $row;
    }
    
    if (!$profile_fields) return;
    
    if ($return == 'array') return $profile_fields;
    
    $content = '<p>' . t('Profile tags available:') . '<br />';

    foreach ($profile_fields as $field) {
        $content .= '<strong>' . $field->title . ':</strong> $' . $field->name . '<br />';
    }
    
    $content .= '</p>';
    
    return $content;
}



function _user_import_validate_add(&$edit) {

   $field_match = $edit['field_match'];
   
   // in case of injection (normaly $field_match will always be an array
   if (!is_array($field_match)) return form_set_error('field_match[1]',  t('At least one column of the csv file must be set as the email address.'));
   
   $counts = array_count_values($field_match);
   while (list ($value, $count) = each ($counts)) {
        // check each field is unique
        if ($value != 0 && $count > 1) $duplicate[$value] = $count;
        // check email address has been selected
        if ("$value" == 'email') $email = TRUE;
   }
   
   if ($duplicate) form_set_error('field_match[1]', t('Database fields can only be matched to one column of the csv file.'));
   
   if (!$email) {
        form_set_error('field_match[1]', t('One column of the csv file must be set as the email address.'));
   }
   
   // check at least one role has been chosen
   $role_sum = 0;
   
   foreach ($edit['roles'] as $role) {
        $role_sum = $role_sum + $role;
   }
   
   if ($role_sum == 0) {
        
        $edit['roles'][2] = 1; 
        form_set_error('roles[1]', t('At least one role must be set.'));
   }

    return;    
}

function user_import_set_import($settings) {

  if ($settings['iid']) {
  
    db_query("UPDATE {user_import} 
        SET file_handle = '%s', pointer = '%d', processed = '%d', valid= '%d', first_line = '%d', contact = '%d', send_email = '%d', field_match = '%s', username = '%s', abbreviate = '%s', roles = '%s', setting = '%s' 
        WHERE iid = '%d'
        ", $settings['file_handle'], $settings['pointer'], $settings['processed'], $settings['valid'], $settings['first_line'], $settings['contact'],  $settings['send_email'], serialize($settings['field_match']), serialize($settings['username']), serialize($settings['abbreviate']), serialize($settings['roles']), $settings['setting'], $settings['iid']);
        
  } else {
  
    db_query("INSERT INTO {user_import} 
        (iid, file_handle, started, pointer, total, processed, valid, first_line, contact, send_email, field_match, username, abbreviate, roles, setting) 
        VALUES (NULL, '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%s', '%s', '%s', '%s')
        ", $settings['file_handle'], time(), $settings['pointer'], $settings['total'],  $settings['processed'], $settings['valid'], $settings['first_line'], $settings['contact'],  $settings['send_email'], serialize($settings['field_match']), serialize($settings['username']), serialize($settings['abbreviate']), serialize($settings['roles']), $settings['setting']);
        
    $settings['iid'] = db_result(db_query("SELECT LAST_INSERT_ID()"));
    
  }
  
  return $settings;
}

function user_import_set_errors($settings, $data, $email, $error) {

    if (is_array($data)) $field_match = array_merge($data, $email);

    db_query("INSERT INTO {user_import_errors} 
        (iid, data, error) 
        VALUES ('%d', '%s', '%s')
        ", $settings['iid'], serialize($field_match), $error);
     return;
}

function user_import_select_imports($iid = NULL) {
    
      if ($iid) {
        $import = db_fetch_array(db_query("SELECT * FROM {user_import} WHERE iid = '%d' LIMIT 1", $iid));
        $import['field_match'] = unserialize($import['field_match']);
        $import['username'] = unserialize($import['username']);
        $import['abbreviate'] = unserialize($import['abbreviate']);
        $import['roles'] = unserialize($import['roles']);
      } else {
        $results = db_query("SELECT * FROM {user_import}");
        while ($row = db_fetch_array($results)) {
            $row['field_match'] = unserialize($row['field_match']);
            $row['username'] = unserialize($row['username']);
            $row['abbreviate'] = unserialize($row['abbreviate']);
            $row['roles'] = unserialize($row['roles']);
            $import[] = $row;
        }

      }
      
    return $import;      
}

function user_import_select_import_data($iid) {

    $import = db_fetch_array(db_query("SELECT started, pointer, processed, setting FROM {user_import} WHERE iid = '%d' LIMIT 1", $iid));
    return $import;
}

function user_import_cron() {
    
    $imports = user_import_select_imports();    
    if (!$imports) return;
    
    foreach ($imports as $import) {
        
        user_import_process($import);
    }
        
    return;
}


function user_import_random_username() {

    $vowels = 'aoueiy';
    $consonants = 'bcdfghjklmnpqrstvwxz';
    $length = 8;
    
    mt_srand ((double) microtime() * 10000000);
    $next_vowel = 0;
    
    for ($count = 0; $count <= $length; $count++) {

        if ($next_vowel) {
            $rand = mt_rand(0, 5);
            $username.= $vowels{$rand};
            $next_vowel = 0;
    
        } else {
            $rand = mt_rand(0, 19);
            $username .= $consonants{$rand};
            $next_vowel = 1;
        }
    }
    
    return $username;
}

function user_import_validate_maximum($user_import_max) {

    $user_import_max = check_plain($user_import_max);
    
    if ($user_import_max && !is_numeric($user_import_max)) {
        $user_import_max = NULL;
        form_set_error('user_import_max', t('Value must be a number.'));
    }
    
    return $user_import_max;
}

// Clean file - in case of incompatable line endings
function user_import_file_cleaner($filepath) {

    $file = fopen($filepath,'r+');
    while (!feof($file )){
       $line = chop(fgets($file,4096));
       $return = ereg_replace(chr(13) . chr(10),"\n", $line);
       $return = ereg_replace(chr(13),"\n", $return);
       fwrite($file, $return);
    }
    
    fclose($file);
    return;
}
	
function user_import_process($settings) {	
    
    $settings = _user_import_setting($settings);
    
    // get enabled roles
    while (list ($rid, $set) = each ($settings['roles'])) {
        if ($set == 1) $roles[] = $rid;
    }
    
    $file = file_check_upload($settings['file_handle']);
    $handle = @fopen($file->filepath, "r");
    
    // move pointer to where we last finished
    if ($settings['pointer'] != 0) fseek ($handle, $settings['pointer']);
  
    // start count of imports on this cron run
    $send_counter = 0;
    
    while ($data = fgetcsv($handle, 10000000, ',')) {
    
        // if importing, check we are not over max number of imports per cron
        if ($settings['setting'] == 'import' && $send_counter > variable_get('user_import_max', 250)) {
            $finished = TRUE;
            break;
        }
        
        $empty_line = (count($data) == 1 && strlen($data[0]) == 0) ? TRUE : FALSE;
       
        // check if this is first line - if so should we skip?
        if (!$empty_line) {
            $first_line_skip = ($settings['processed'] == 0 && !$first_line_skip) ? $settings['first_line'] : NULL;
        }

        if ($first_line_skip != 1 && !$empty_line) {

            unset($email);
            unset($errors);
            unset($fields);
            reset($settings['field_match']);
            
            while (list ($file_column, $fid) = each ($settings['field_match'])) {
            
                if ($fid == 'email') {
                    $email = trim($data[$file_column]);
                    $errors = user_import_validate_email($email);
                }
                
                if ($fid == 'password') {
                    $password = trim($data[$file_column]);
                }
        
                if ($fid != 0 && $fid != 'email' && $fid != 'password') $fields[$fid] = $data[$file_column];
                
                if ($settings['username'][$file_column] > 0) {
                        $username_data[$file_column]= $data[$file_column];
                        $username_order[$file_column] = $settings['username'][$file_column];
                        $username_abbreviate[$file_column]= $settings['abbreviate'][$file_column];
                } 
            
            }
            
            if (!$errors) {
                
                if ($settings['setting'] == 'import') {

                    $username = user_import_create_username($username_order, $username_data, $username_abbreviate);
                    $password = ($password) ? $password : user_password();
    
                    $account = array(
                        "name" => $username,
                        "pass" => $password,
                        "mail" => $email,
                        "init" => $email,
                        "timezone" => "-18000",
                        "status" => 1,
                        "roles" => $roles,
                        "contact" => $settings['contact']);
        
                    $account = user_save('', $account);
                    watchdog('user', t('New user: %name %email.', array('%name' => theme('placeholder', $account->name), '%email' => theme('placeholder', '<'. $account->mail .'>'))), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));
                    
                    // import info to profile
                    if (is_array($fields)) {
                        while (list ($fid, $content) = each ($fields)) {
                            user_import_insert_profile($fid, $account->uid, trim($content));
                        }
                    }      
                    
                    if ($settings['send_email']) user_import_send_email($account, $pass);
                    $send_counter++;

                }
                
                $settings['valid']++;
            }
            
            $settings['processed']++;

            // save lines that have fatal errors
            if ($errors) user_import_set_errors($settings, $fields, $email, $errors);
        }
        
        $settings['pointer'] = ftell($handle);
        if ($first_line_skip != 1 && !$empty_line) $settings = user_import_set_import($settings);
    }
    
    fclose ($handle);
    if ($settings['setting'] == 'import' && !$finished) $settings['setting'] = 'imported';
    if ($settings['setting'] == 'test') $settings['setting'] = 'tested';
    $settings = user_import_set_import($settings);
    
    return $settings;
}

function _user_import_setting($settings) {

     // if existing import, merge settings with import variables
     if ($settings['iid']) {
        
        $import = user_import_select_import_data($settings['iid']);

        // prevent switch from import to test
        if (($import['setting'] == 'import' || $import['setting'] == 'imported') && ($settings['setting'] == 'test' || $settings['setting'] == 'testing')) {
            drupal_set_message(t('Once importing has begun, cannot switch to testing.'), 'error');
            drupal_goto ('admin/settings/user_import/list');
        }   
        
        // switching from testing to import
        if ($settings['setting'] == 'import' && ($import['setting'] == 'test' || $import['setting'] == 'tested')) {
            $settings['iid'] = NULL;
            $import['setting'] = 'import';
            $import['pointer'] = 0;
            $import['processed'] = 0;
            $import['valid'] = 0;
        }
        
        // merge settings in db with new settings from form
        $settings = array_merge($import, $settings);
       
     } else {
        $settings['pointer'] = 0;
        $settings['processed'] = 0;
        $settings['valid'] = 0;
    }
    
    return $settings;
}

?>