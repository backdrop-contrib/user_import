<?php
// $Id$

/**
 * @file
 * Import users from a coma seperated file (csv).
 */

/**
 * Implementation of hook_help().
 */
function user_import_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Import users from a coma seperated file (csv).');
    case 'admin/settings/user_import':
      return t("Import users from a coma seperated file (csv). Click 'Add Import' to start a new import.");
  }
}


/**
 * Implementation of hook_perm().
 */
function user_import_perm() {
  return array('import users');
}


/**
 * Implementation of hook_menu().
 */
function user_import_menu($may_cache) {
  
  global $user;
  $items = array();
  
     if ($may_cache) {     
     
        $items[] = array(
            'path' => 'admin/settings/user_import', 
            'title' => t('user imports'), 
            'callback' => 'user_import_overview',
            'access' => user_access('import users'),
            );
        $items[] = array(
            'path' => 'admin/settings/user_import/list', 
            'title' => t('list imports'), 
            'type' => MENU_DEFAULT_LOCAL_TASK, 
            'access' => user_access('import users'),
            'weight' => -10
            );
        $items[] = array(
          'path' => 'admin/settings/user_import/add', 
          'title' => t('add import'),
          'callback' => 'user_import_add',
          'access' => user_access('import users'),
          'type' => MENU_LOCAL_TASK
        );
        $items[] = array(
          'path' => 'admin/settings/user_import/configure', 
          'title' => t('configure'),
          'callback' => 'user_import_configure',
          'access' => user_access('import users'),
          'type' => MENU_LOCAL_TASK
        );
    }

  return $items;
}


function user_import_overview($action = NULL, $import_id = NULL) {
  
    if ($import_id && is_numeric($import_id)) {
        
        $import = _user_import_select_imports($import_id);
        
        switch ($action) {
            case 'delete':
                db_query("DELETE FROM {user_import} WHERE iid = '%d'", $import_id);
                db_query("DELETE FROM {user_import_errors} WHERE iid = '%d'", $import_id);
                
                file_delete($import['filepath']);
                $message .= t("Import info and file '%filename' have been deleted.", array('%filename' => $import['oldfilename']));
                Unset($import);
                
                drupal_set_message($message);
                break;
                
            case 'continue':
                _user_import_process($import);
                break;
                
            case 'import':
                $import['setting'] = 'import';
                _user_import_process($import);
                drupal_set_message(t('Imported'));
                break;
                
            case 'errors':
                $output = theme('user_import_errors', $import);
                break;
        }
    }

    if (!$output) $output = theme_user_import_overview();
    return $output;    
}


function theme_user_import_overview() {

    $imports = _user_import_select_imports();
    
    if (!$imports) return ' ';

    foreach ($imports as $import) {

        // header labels
        $import_label = ($import['setting'] == 'tested' || $import['setting'] == 'test') ? t('importable') : t('imported');
        $header = array(t('file'), t('started'), t('processed'), $import_label, t('errors'), t('status'));
                    
        // info row
        $errors = db_result(db_query("SELECT COUNT(iid) FROM {user_import_errors} WHERE iid = '%d'", $import['iid']));         
        $errors_link = ($errors == 0) ? '0': l($errors, 'admin/settings/user_import/errors/' . $import['iid']);           
        
        $rows[0] = array(
            $import['oldfilename'],
            format_date($import['started'], 'small'),
            array("data" => $import['processed'], "align" => 'center'),
            array("data" => $import['valid'], "align" => 'center'),
            array("data" => $errors_link, "align" => 'center'),
            $import['setting'],
        );
        
        $output .= theme('table', $header, $rows);
        
        // action buttons
        $settings_link = l(t('Settings'), 'admin/settings/user_import/add/' . $import['iid']);
        $delete_link = l(t('Delete'), 'admin/settings/user_import/delete/' . $import['iid']);
        $continue_link = l(t('Continue Processing'), 'admin/settings/user_import/continue/' . $import['iid']);
        $import_link = l(t('Import'), 'admin/settings/user_import/import/' . $import['iid']);
        
        $output .= $settings_link  . ' | ';   
        $output .= $delete_link;   
        if ($import['setting'] == 'tested' || $import['setting'] == 'test') $output .= ' | ' . $import_link;
        if ($import['setting'] == 'test' || $import['setting']  == 'import') $output .= ' | ' . $continue_link;
    } 
    
    return $output;
}


function user_import_add($import_id = NULL) {

  $display = $_SESSION['user_import']['display'];

  switch ($display) {

        case 'settings':    
            $form = user_import_file_remove_build();
            $form .= user_import_settings_build($import_id);
            break;
            
        default:
            
            if( empty($import_id) ) {
                $form = user_import_upload_build();
            } else {
                // user is comming from list view
                if (is_numeric($import_id)) {
                    $form = user_import_file_remove_build($import_id);
                    $form .= user_import_settings_build($import_id);
                }
            }
            
            break;
    }
    
    if (empty($form)) $form = user_import_upload_build();
    return $form;
}


// Upload file form
function user_import_upload_build() {
    
    user_import_session_empty();
    $form = array();
    
    $ftp_files = _user_import_ftp_files();
    
    if (!empty($ftp_files)) {
        
        $file_count = count($ftp_files);
        
        $form['ftp'] = array(
            '#type' => 'fieldset',
            '#title' => t('FTP Uploads'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE, 
            '#tree' => TRUE,
            '#description' => t("Any files uploaded to the 'user_import' directory using FTP can be selected for import here. Useful if the import file is too large for upload via the browser."),
        );
        
         $form['ftp']['files'] = array(
              '#type' => 'radios',
              '#title' => t('Files'),
              '#default_value' => 0,
              '#options' => $ftp_files,
         );
        
        $form['ftp']['scan'] = array(
            '#type' => 'submit', 
            '#value' => t('Detect new files'),
        );
        
    }
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('CSV File'),
        '#size' => 50,
        '#description' => t('Select the CSV file to be imported')
        );
        
    $settings = _user_import_select_imports(NULL, 'get saved');
    
    if ($settings) {
 
        $saved_settings = array(t('-- none --'));
        foreach ($settings AS $settings_set) {
            $saved_settings[$settings_set['iid']] = $settings_set['name'];
        }
           
        $form['import_template_id'] = array( 
            '#type' => 'select',
            '#title' => t('Saved Settings'),
            '#description' => t('Select if you want to use a previously saved set of settings.'),
            '#default_value' => variable_get('user_import_settings', 0),
            '#options' => $saved_settings,
        );
        
    } 
    
    $form['display'] = array('#type' => 'value', '#value' => 'settings');    
    $form['submit'] = array('#type' => 'submit', '#value' => t('Next'));    
    $form['#attributes']['enctype'] = 'multipart/form-data';  

    return drupal_get_form('user_import_upload', $form);
}

function user_import_upload_validate($form_id, $form_values) {
        
    if ($_POST['op'] == t('Detect new files')) drupal_goto ('admin/settings/user_import/add');
    
    $file = _user_import_file(NULL, $form_values['ftp']['files']);    
    $handle = _user_import_file_open($file);  
    // get first row of file
    $data_row = _user_import_file_row($file, $handle);
    
    // TO DO
    // _user_import_file_cleaner($file->filepath);
    // currently function screws up line endings
    // make it work to convert other file formats 
}

function user_import_upload_submit($form_id, $form_values) {
    
    if (empty($form_values['ftp']['files'])) {
    
        // rename browser uploaded file to avoid file name clashes
        $file = _user_import_rename_file($form['file']);
        
    } else {
        
        // get info of FTP uploaded file
        $file = _user_import_file(NULL, $form_values['ftp']['files']); 
    }
    
    // save data to session
    $save_to_session['file'] = $file;
    $save_to_session['import_template_id'] = $form_values['import_template_id'];
    $save_to_session['display'] = 'settings';
    user_import_save_session($save_to_session);

    return;
}

function user_import_file_remove_build($import_id = NULL) {
    
    $file = _user_import_file($import_id);
    
    $form['remove'] = array(
        '#type' => 'fieldset',
        '#title' => t('Use Different CSV File'),
        '#description' => t('Remove file to use a different file.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE, 
        '#tree' => TRUE,
    );
    $form['remove'] ['file'] = array(
        '#type' => 'item', 
        '#title' => t('Uploaded file'),
        '#value' => sprintf("%s (%d Bytes)", $file->oldfilename, $file->filesize)
    );
    $form['remove'] ['filename'] = array(
        '#type' => 'value',
        '#value' => $file->filename,
    );
    $form['remove'] ['oldfilename'] = array(
        '#type' => 'value',
        '#value' => $file->oldfilename,
    );
    $form['remove'] ['filepath'] = array(
        '#type' => 'value',
        '#value' => $file->filepath,
    );

    $form['remove'] ['submit'] = array(
        '#type' => 'submit', 
        '#value' => t('Remove file')
    );

    return drupal_get_form('user_import_file_remove', $form);
}

function user_import_file_remove_submit($form_id, $form_values) {
    
    if ( $form_values['remove'] ['filepath'] ) {
        file_delete( $form_values['remove'] ['filepath'] );
        user_import_session_empty();
    }
    
    return;
}


function user_import_settings_build($iid = NULL) {

    $file = _user_import_file($iid);

    // if saved settings have been selected: load the settings
    $import  = _user_import_settings($iid);
    
    $edit = $_POST['edit'];
    
    /*
    // ??? <<<
    $iid = ($iid) ? $iid : $edit['iid'];
    if ($iid) {
        $form['iid'] = array(
            '#type' => 'hidden',
            '#value' => $iid,
        );
    } 
   // ?? >>>>
   */
    
    $form['filename'] = array(
        '#type' => 'value',
        '#value' => $file->filename,
    );
    $form['oldfilename'] = array(
        '#type' => 'value',
        '#value' => $file->oldfilename,
    );
    $form['filepath'] = array(
        '#type' => 'value',
        '#value' => $file->filepath,
    );
    
    $form['options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Options'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE, 
        '#tree' => TRUE,
    );
    
    $form['options'] ['first_line'] = array(
        '#type' => 'checkbox',
        '#title' => t('Ignore First Line'),
        '#default_value' => $import['first_line'],
        '#description' => t('If the first line is the names of the data columns, set to ignore first line.'),
    );
    
    $form['options'] ['contact'] = array(
        '#type' => 'checkbox',
        '#title' => t('Contact'),
        '#default_value' => $import['contact'],
        '#description' => t("Set each user's personal contact form to 'allowed'."),
    );
    
    $form['options'] ['send_email'] = array(
        '#type' => 'checkbox',
        '#title' => t('Send Email'),
        '#default_value' => $import['send_email'],
        '#description' => t('Send email to users when their account is created.'),
    );
    
    $form['options'] ['username_space'] = array(
        '#type' => 'checkbox',
        '#title' => t('Username Space'),
        '#default_value' => $import['username_space'],
        '#description' => t("Include spaces in usernames, e.g. 'John' + 'Smith' => 'John Smith'."),
    );
  
    $handle = _user_import_file_open($file);
    $data_row = _user_import_file_row($file, $handle);
    $profile_fields = _user_import_profile('fid', 'title');

    // add default and email address options
    $profile_fields[0] = '-------------';
    $profile_fields['email'] = t('Email Address') . '*';
    $profile_fields['password'] = t('Password');
    asort($profile_fields);  
    
    $row = 0;
    $sort = array(t('no'), 1, 2, 3, 4);
    
    $form['field_match'] = array(
        '#type' => 'fieldset',
        '#title' => t('Field Match'),
        '#description' => $group_text,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE, 
        '#tree' => TRUE,
    );
        
    foreach($data_row as $data_cell) {        

        $form['field_match'][$row]= array(
            '#tree' => TRUE,
        );        
        $form['field_match'][$row]['csv'] = array( 
            '#value' => drupal_substr($data_cell, 0, 40),
        );
        $form['field_match'][$row]['field_match'] = array( 
            '#type' => 'select',
            '#default_value' => ($import['field_match'][$row]['field_match']) ? $import['field_match'][$row]['field_match'] : $profile_fields[0],
            '#options' => $profile_fields,
        );
        $form['field_match'][$row]['username'] = array( 
            '#type' => 'select',
            '#default_value' => ($import['field_match'][$row]['username']) ? $import['field_match'][$row]['username'] : $sort[0],
            '#options' => $sort,
        );
        $form['field_match'][$row]['abbreviate'] = array( 
            '#type' => 'checkbox',
            '#default_value' => ($import['field_match'][$row]['abbreviate']) ? $import['field_match'][$row]['abbreviate'] : NULL,
        );
        
        $row++;
    }
    
    $roles_data = user_roles();
    // remove 'anonymous user' option
    while (list ($rid, $role_name) = each ($roles_data)) {
        if ($role_name != 'anonymous user') $roles[$rid] = $role_name;
    }
    
    // roles selected
    if ( !empty($import['roles']['options']) ) {
        foreach ($import['roles']['options'] as $rid) {
            if ($rid != 0) $roles_selected[] = $rid;
        }
    }
    
    if ( empty($roles_selected) ) $roles_selected[] = 1; 

    $form['roles'] = array(
        '#type' => 'fieldset',
        '#title' => t('Role Assign'),
        '#description' => t('Select which role(s) imported users should be assigned.'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE, 
        '#tree' => TRUE,
    );
    
    $form['roles']['options'] = array(
        '#type' => 'checkboxes',
        '#options' => $roles,
        '#default_value' => $roles_selected,
    );
    
    // settings template update controls
    if ($edit['import_template_id']) {
    
        $form['import_template_id'] = array(
            '#type' => 'hidden', 
            '#value' => ($import_template_id) ? $import_template_id : $edit['import_template_id'],
        );
        
        $form['save'] = array(
            '#type' => 'fieldset',
            '#title' => t('Saved Settings'),
            '#description' => t("If you've made changes to the settings since you saved them you can update the saved set, or save them as a new set."),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE, 
            '#tree' => TRUE,
        );
        
        $saved_settings_name = ($import['saved_settings_name']) ? $import['saved_settings_name'] : $edit['saved_settings_name'];
        $form['saved_settings_name'] = array(
            '#type' => 'hidden', 
            '#value' => $saved_settings_name,
        );

        $form['save'] ['update'] = array(
            '#type' => 'checkbox',
            '#title' => t('Update'),
            '#description' => t("Update saved settings for '%name'", array('%name' => $saved_settings_name)),
        );
        
         $form['save'] ['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Save As New'),
            '#size' => 30,
            '#maxlength' => 25,
            '#description' => t('Input a name to save settings as a new set.'),
        );
    
    // new settings template save controls
    } else {
        
        $form['save'] = array(
            '#type' => 'fieldset',
            '#title' => t('Save Settings'),
            '#description' => t('Save settings for re-use on other imports.'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE, 
            '#tree' => TRUE,
        );
         $form['save'] ['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Settings Name'),
            '#size' => 30,
            '#maxlength' => 25,
            '#description' => t('Name this set of settings if you want to save them.'),
        );

    }

    $form['test'] = array(
        '#type' => 'submit', 
        '#value' => t('Test'),
    );
    $form['import'] = array(
        '#type' => 'submit', 
        '#value' => t('Import'),
    );
    $form['cancel'] = array(
        '#type' => 'submit', 
        '#value' => t('Cancel'),
    );
    
    return drupal_get_form('user_import_settings', $form);
}


function theme_user_import_settings($form) {

    $header = array(t('csv column'), t('Drupal fields'), t('username'), t('abbreviate'));
    
    foreach (element_children($form['field_match']) as $key) {
        $rows[] = array(
            form_render($form['field_match'][$key]['csv']),
            form_render($form['field_match'][$key]['field_match']),
            form_render($form['field_match'][$key]['username']),
            form_render($form['field_match'][$key]['abbreviate']),
        );
    }
    
    $group_text = t("Match columns in CSV file to profile fields, leave as '----' if there is no match.");
    $group_text .= '<br /><strong>' . t('Username') . ': </strong>' . t("The Username will be built from CSV columns in the order selected.");
    $group_text .= '<br /><strong>' . t('Abbreviate') . ': </strong>' . t("Use the first letter of a field in uppercase for the Username, e.g. 'john' -> 'J'.");
    $group_text .= '<br />' . t("If no CSV fields are selected, the Username will be randomly generated.");
    
    $form['field_match']['#value'] = theme('table', $header, $rows);
    
    $output .= form_render($form['options']);
    $output .= form_render($form);
    return $output;
}


function user_import_settings_validate($form_id, $form_values) {

    // Cancel button - clear everything and go to list page
    if ($_POST['op'] == t('Cancel')) {
        user_import_session_empty();
        // TO DO
        // delete uploded file
        drupal_goto ('admin/settings/user_import');
    }
    
    $fields = array();
   
    while (list ($row, $values) = each ($form_values['field_match'])) {

        // check each field is unique
        if ($values['field_match'] != '0' && in_array($values['field_match'], $fields)) {
            
            form_set_error('field_match', t('Database fields can only be matched to one column of the csv file.'));
        }
        
        $fields[$values['field_match']] = $values['field_match'];
        
        // check email address has been selected
        if ($values['field_match'] == 'email') $email = TRUE;
    }
   
   if (!$email) form_set_error('email', t('One column of the csv file must be set as the email address.'));

   // check at least one role has been chosen 
   foreach ($form_values['roles']['options'] as $role) {
        if ($role > 0) $roles = TRUE;
   }
   
   if (empty($roles)) form_set_error('roles', t('At least one role must be set.'));

 
   if ($form_values['name']) {
       $form_values['name'] = rtrim($form_values['name']);
       $form_values['name'] = check_plain($form_values['name']);
       
       if (drupal_strlen($form_values['name']) < 1 || drupal_strlen($form_values['name']) > 25) {
        form_set_error('name', t('Name of saved settings must be between 1 and 25.'));
       }
   }
}

function user_import_settings_submit($form_id, $form_values) {

    switch ($_POST['op']) {
        
        case t('Test'):
            $form_values['setting'] = 'test';
            drupal_set_message(t('Tested'));
            break;
        case t('Import'):
            $form_values['setting'] = 'import';
            drupal_set_message (t('Imported'));
            break;            
    }

    $form_values = _user_import_save_import($form_values, 'display message');
    user_import_session_empty();
    $form_values['save']['update'] = NULL;
    $form_values['import_template_id'] = NULL;
    $form_values['save']['name'] = NULL;
    _user_import_process($form_values);
    drupal_goto ('admin/settings/user_import');
}


function theme_user_import_errors($import) {

    if (!$import['iid']) return;
    $errors = 0;
    
    $output .= '<p>' . t('<strong>CSV File:</strong> %file', array('%file' => $import['oldfilename'])) . '<br />';
    
    // get profile fields
    $profile_fields = _user_import_profile('fid', 'title');
    
    // add email address options
    $profile_fields['email'] = t('Email Address');
    asort($profile_fields);

    foreach($import['field_match'] as $settings) {     
        if ($settings['field_match'] != '0') $header[] = $profile_fields[$settings['field_match']];
    }

    $results = db_query("SELECT * FROM {user_import_errors} WHERE iid = '%d'", $import['iid']);
    while ($line = db_fetch_array($results)) {
        $line['data'] = unserialize($line['data']);
        $file_lines[] = $line;
    }

    foreach ($file_lines as $file_line) {
        
        $errors++;
        $row = NULL;
        foreach($file_line['data'] as $file_cell) {
            $row[] = array("data" => drupal_substr($file_cell, 0, 40), "align" => "left");
        }
        
        $row[] = $file_line['error'];
        $rows[] = $row;
    }

    $output .= t('<strong>Errors:</strong> %errors', array('%errors' => $errors)) . '</p>';
    $header[] = t('error');
    
    $output .= theme('table', $header, $rows);    
    return $output;
}

function user_import_configure() { 
        
    $form['user_import_max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum Users/Process'),
        '#default_value' => variable_get('user_import_max', 250),
        '#size' => 10,
        '#maxlength' => 10,
        '#description' => t('Maximum number of users to import each time the file is processed, useful for controling the rate at which emails are sent out.'),
    );
    
    $form['user_import_line_max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length of line'),
        '#default_value' =>  variable_get('user_import_line_max', 1000),
        '#size' => 10,
        '#maxlength' => 10,
        '#description' => t('The default is set at 1,000 characters, if a line in your csv is longer than this you should set a higher maximum here. Setting higher maximums will slow down imports.'),
    );
    
    
    $settings = _user_import_select_imports(NULL, 'get_saved');
    if ($settings) {
 
        $saved_settings = array('-- none --');
        foreach ($settings AS $settings_set) {
            $saved_settings[$settings_set['iid']] = $settings_set['name'];
        }
        
        $form['user_import_settings'] = array( 
            '#type' => 'select',
            '#title' => t('Default Settings'),
            '#description' => t('Select if you want to use a previously saved set of settings as default for all imports.'),
            '#default_value' => variable_get('user_import_settings', 0),
            '#options' => $saved_settings,
        );
    } 

    $form['submit'] = array(
        '#type' => 'submit', 
        '#value' => t('Save'),
        );
    
    return drupal_get_form('user_import_configure', $form);
}


// Create Username    
function _user_import_create_username($order, $data, $abbreviate, $username_space) {

    if ($data) {
    
        asort($order);
        reset($order);
    
        while (list ($file_column, $sequence) = each ($order)) {
            
            if (!empty($username) && !empty($username_space)) $username .= ' ';
            $username .= ($abbreviate[$file_column] == 1) ? trim(drupal_strtoupper(chr(ord($data[$file_column])))) : trim($data[$file_column]);
        }

    } else {
        $username = _user_import_random_username();
    }
    
    $exists_username = _user_import_validate_username($username);
    
    // add number at end of username if it already exists
    if ($exists_username) {

        $count = _user_import_count_usernames($username);
        $count++;
        $username = $username . $count;
    }
    
    return $username;
}
    
// Check for a duplicate in Username    
function _user_import_validate_username($username) {

    $result = db_result(db_query("SELECT uid from {users} where name = '%s' LIMIT 1", $username));
    return $result ;
}

function _user_import_count_usernames($username) {

    $result = db_result(db_query("SELECT COUNT(uid) from {users} where name LIKE '%s%s'", $username, '%'));
    return $result ;
}

// Check for a duplicate email address
function _user_import_validate_email($email = NULL) {

    if (!$email) return 'no email';
    
    if (!valid_email_address($email)) return 'invalid email';
    
    $result = db_result(db_query("SELECT uid from {users} where mail= '%s' LIMIT 1", $email));
    if ($result) return 'duplicate email';
 
    return;
}


function _user_import_save_profile($field, $uid, $value) {
    
    $profile = db_query("INSERT INTO {profile_values} (fid,uid,value) VALUES('%d','%d','%s')", $field, $uid, $value);
    return;
}

// Send email when account is created    
function _user_import_send_email($account, $password, $profile) {

    global $base_url;
    $profile_name = _user_import_profile('fid', 'name');
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    
    $variables = array('%username' => $account->name, '%site' => variable_get('site_name', 'drupal'), '%login_url' => user_pass_reset_url($account), '%password' => $password, '%uri' => $base_url, '%uri_brief' => drupal_substr($base_url, drupal_strlen('http://')), '%mailto' => $account->mail, '%date' => format_date(time()), '%login_uri' => url('user', NULL, NULL, TRUE), '%edit_uri' => url('user/'. $account->uid .'/edit', NULL, NULL, TRUE));

    // import info to profile
    if (is_array($profile)) {
        while (list ($fid, $value) = each ($profile)) {
            $variables[ '%' . $profile_name[$fid] ] = $value;
        }
    }   

    $subject = _user_mail_text('welcome_subject', $variables);
    $body = _user_mail_text('welcome_body', $variables);
    user_mail($account->mail, $subject, $body, "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
    return;
}
/*
function _user_import_profile() {
    
    if (!module_exist('profile')) return;
    
    $results = db_query("SELECT DISTINCT(fid), title FROM {profile_fields}");

    while ($row = db_fetch_object($results)) {
        $profile_fields[$row->fid] = $row->title;
    }
    
    return $profile_fields;
}
*/
function _user_import_profile($key = 'fid', $return_value = NULL) {
    
    if (!module_exist('profile')) return; 
    
    static $fields_static;
    // avoid making more than one database call for profile info
    if (empty($fields_static)) {
    
        $results = db_query("SELECT * FROM {profile_fields}");
        
        while ($row = db_fetch_object($results)) { 
            // don't include private fields
            if (user_access('administer users') || $row->visibility != PROFILE_PRIVATE) {
                $fields_static[] = $row;
            }
        }
    }
   
    // return all profile fields info, or just specific type
    if (empty($return_value)) {
        foreach ($fields_static as $field) {
            $fields[$field->{$key}] = $field;
        }
    } else {
        foreach ($fields_static as $field) {
            $fields[$field->{$key}] = $field->{$return_value};
        }
    }
    
    asort($fields);    
    return $fields;
}


function _user_import_save_import($settings, $messages = NULL) {

    $first_line = ($settings['options']['first_line'] == 1 || $settings['first_line'] == 1) ? 1 : 0;
    $contact = ($settings['options']['contact'] == 1 || $settings['contact'] == 1) ? 1 : 0;
    $send_email = ($settings['options']['send_email'] == 1 || $settings['send_email'] == 1) ? 1 : 0;
    $username_space = ($settings['options']['username_space'] == 1 || $settings['username_space'] == 1) ? 1 : 0;
    
    /*
    ** Save/Update settings for this import
    */
    // Update settings for existing import
    if ($settings['iid']) {
    
        db_query("UPDATE {user_import} 
            SET filename = '%s', oldfilename = '%s', filepath = '%s', pointer = '%d', processed = '%d', valid= '%d', first_line = '%d', contact = '%d', username_space = '%d', send_email = '%d', field_match = '%s', roles = '%s', setting = '%s' 
            WHERE iid = '%d'
            ", $settings['filename'], $settings['oldfilename'], $settings['filepath'], $settings['pointer'], $settings['processed'], $settings['valid'], $first_line, $contact, $username_space, $send_email, serialize($settings['field_match']), serialize($settings['roles']), $settings['setting'], $settings['iid']);
        
        // Save settings for new import
    } else {
    
        db_query("INSERT INTO {user_import} 
            (iid, filename, oldfilename, filepath, started, pointer, total, processed, valid, first_line, contact, username_space, send_email, field_match, roles, setting) 
            VALUES (NULL, '%s', '%s', '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%s', '%s')
            ", $settings['filename'], $settings['oldfilename'], $settings['filepath'], time(), $settings['pointer'], $settings['total'],  $settings['processed'], $settings['valid'], $first_line, $contact, $username_space, $send_email, serialize($settings['field_match']), serialize($settings['roles']), $settings['setting']);
            
        $settings['iid'] = db_result(db_query("SELECT LAST_INSERT_ID()"));
    }
  
    /*
    ** Save/Update settings for settings template
    */
    // update setting template
    if ($settings['save']['update'] && $settings['import_template_id']) {
        db_query("UPDATE {user_import} 
            SET name = '%s', first_line = '%d', contact = '%d', username_space = '%d', send_email = '%d', field_match = '%s', roles = '%s' WHERE iid = '%d'
            ", $settings['saved_settings_name'], $first_line, $contact, $username_space, $send_email, serialize($settings['field_match']), serialize($settings['roles']), $settings['import_template_id']);
        
        if ($messages) drupal_set_message (t("Settings set '%name' was updated.", array('%name' => $settings['saved_settings_name'])));
    }
    
    // save new settings template
    if ($settings['save']['name'] && $settings['save']['name'] != '') {

        db_query("INSERT INTO {user_import} 
            (iid, name, first_line, contact, username_space, send_email, field_match, roles, setting) 
            VALUES (NULL, '%s', '%d', '%d', '%d', '%d', '%s', '%s', 'template')
            ", $settings['save']['name'], $first_line, $contact, $username_space, $send_email, serialize($settings['field_match']), serialize($settings['roles'])); 
        if ($messages) drupal_set_message (t("Settings saved as '%name'.", array('%name' => $settings['save']['name'])));
    }
    
    return $settings;
}


function _user_import_save_errors($import_id, $data, $email, $error) {

    $data['email'] = $email;

    db_query("INSERT INTO {user_import_errors} 
        (iid, data, error) 
        VALUES ('%d', '%s', '%s')
        ", $import_id, serialize($data), $error);
     return;
}

function _user_import_select_imports($iid = NULL, $template = FALSE) {
         
    if ($iid) {
    
        $import = db_fetch_array(db_query("SELECT * FROM {user_import} WHERE iid = '%d' LIMIT 1", $iid));
        $import['field_match'] = unserialize($import['field_match']);
        $import['roles'] = unserialize($import['roles']);
    
    } else {
        
        $query = ($template) ? "SELECT * FROM {user_import} WHERE setting = 'template'" : "SELECT * FROM {user_import} WHERE setting != 'template' ORDER BY started DESC";
        $results = db_query($query);
        while ($row = db_fetch_array($results)) {
            $row['field_match'] = unserialize($row['field_match']);
            $row['roles'] = unserialize($row['roles']);
            $import[] = $row;
        }
    }
      
    return $import;      
}


function user_import_cron() {
    
    $imports = _user_import_select_imports();    
    if (!$imports) return;
    
    foreach ($imports as $import) {
        
        if ($import['setting'] == 'test' || $import['setting'] == 'import') _user_import_process($import);
    }
        
    return;
}


function _user_import_random_username() {

    $vowels = 'aoueiy';
    $consonants = 'bcdfghjklmnpqrstvwxz';
    $length = 8;
    
    mt_srand ((double) microtime() * 10000000);
    $next_vowel = 0;
    
    for ($count = 0; $count <= $length; $count++) {

        if ($next_vowel) {
            $rand = mt_rand(0, 5);
            $username.= $vowels{$rand};
            $next_vowel = 0;
    
        } else {
            $rand = mt_rand(0, 19);
            $username .= $consonants{$rand};
            $next_vowel = 1;
        }
    }
    
    return $username;
}


function user_import_configure_validate($form_id, &$form) {

    if (is_numeric($form['user_import_max'])) {
        if ($form['user_import_max'] < 10) form_set_error('user_import_max', t("Value should be at least 10."));       
    } else {
        form_set_error('user_import_max', t('Value must be a number.'));
    }
    
    if (is_numeric($form['user_import_line_max'])) {
        if ($form['user_import_line_max'] < 1000) form_set_error('user_import_line_max', t("Value must be higher than 1000."));
        if ($form['user_import_line_max'] > 1000000) form_set_error('user_import_line_max', t("Value must be lower than 1,000,000."));
    } else{
        form_set_error('user_import_line_max', t('Value must be a number.'));
    }
    
    return;
}

function user_import_configure_submit($form_id, $form_values) { 

    if (form_get_errors()) return;
    settype($form_values['user_import_max'], 'integer');
    settype($form_values['user_import_line_max'], 'integer');
    variable_set('user_import_max', $form_values['user_import_max']);
    variable_set('user_import_line_max', $form_values['user_import_line_max']);
    variable_set('user_import_settings', $form_values['user_import_settings']);
    drupal_set_message(t('Configuration settings have been saved.'));
    drupal_goto('admin/settings/user_import');
}

// Clean file - in case of incompatable line endings
function _user_import_file_cleaner($filepath) {

    $file = fopen($filepath,'r+');
    while (!feof($file )){
       $line = chop(fgets($file,4096));
       $return = ereg_replace(chr(13) . chr(10),"\n", $line);
       $return = ereg_replace(chr(13),"\n", $return);
       fwrite($file, $return);
    }
    
    fclose($file);
    return;
}
	
function _user_import_process($settings) {	

    $user_import_line_max = variable_get('user_import_line_max', 1000);
    $settings = _user_import_setting($settings);
    
    // get enabled roles
    $roles_settings = $settings['roles']['options'];
    while (list ($rid, $set) = each ($roles_settings)) {
        if ($set != 0) $roles[$rid] = $rid;
    }

    $handle = @fopen($settings['filepath'], "r");
    
    // move pointer to where we last finished
    if ($settings['pointer'] != 0) fseek ($handle, $settings['pointer']);
  
    // start count of imports on this cron run
    $send_counter = 0;
    
    while ($data = fgetcsv($handle, $user_import_line_max, ',')) {
    
        // if importing, check we are not over max number of imports per cron
        if ($settings['setting'] == 'import' && $send_counter > variable_get('user_import_max', 250)) {
            $finished = TRUE;
            break;
        }
        
        $empty_line = (count($data) == 1 && drupal_strlen($data[0]) == 0) ? TRUE : FALSE;
       
        // check if this is first line - if so should we skip?
        if (!$empty_line) {
            if ($settings['options']['first_line'] == 1 || $settings['first_line'] == 1) $first_line_setting = 1;
            $first_line_skip = ($settings['processed'] == 0 && !$first_line_skip) ? $first_line_setting : NULL;
        }

        if ($first_line_skip != 1 && !$empty_line) {

            unset($email);
            unset($password);
            unset($errors);
            unset($fields);
            reset($settings['field_match']);

            while (list ($file_column, $column_settings) = each ($settings['field_match'])) {
            
                if ($column_settings['field_match'] == 'email') {
                    $email = trim($data[$file_column]);
                    $errors = _user_import_validate_email($email);
                }
                
                if ($column_settings['field_match'] == 'password') $password = trim($data[$file_column]);
        
                if ($column_settings['field_match'] != 0 && $column_settings['field_match'] != 'email' && $column_settings['field_match'] != 'password') $fields[$column_settings['field_match']] = $data[$file_column];
                
                if ($column_settings['username'] > 0) {
                        $username_data[$file_column]= $data[$file_column];
                        $username_order[$file_column] = $file_column;
                        $username_abbreviate[$file_column]= $column_settings['abbreviate'];
                } 
            }

            if (!$errors) {
                
                if ($settings['setting'] == 'import') {

                    $username = _user_import_create_username($username_order, $username_data, $username_abbreviate, $settings['options']['username_space']);
                    if (empty($password)) $password = user_password();
                    if ($settings['options']['contact'] == 1 || $settings['contact'] == 1) $contact = 1;
    
                    $account = array(
                        "name" => $username,
                        "pass" => $password,
                        "mail" => $email,
                        "init" => $email,
                        "timezone" => "-18000",
                        "status" => 1,
                        "roles" => $roles,
                        "contact" => $contact
                     );
        
                    $account = user_save('', $account);
                    watchdog('user', t('New user: %name %email.', array('%name' => theme('placeholder', $account->name), '%email' => theme('placeholder', '<'. $account->mail .'>'))), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));
                 
                    // import info to profile
                    if (is_array($fields)) {
                        while (list ($fid, $content) = each ($fields)) {
                            _user_import_save_profile($fid, $account->uid, trim($content));
                        }
                    }      
                    
                    if ($settings['options']['send_email'] == 1 || $settings['send_email'] == 1) _user_import_send_email($account, $password, $fields);
                    $send_counter++;

                }
                
                $settings['valid']++;
            }
            
            $settings['processed']++;

            
        }
        
        $settings['pointer'] = ftell($handle);
        
        // save lines that have fatal errors
        if ($errors) _user_import_save_errors($settings['iid'], $fields, $email, $errors);
    }
    
    fclose ($handle);
    if ($settings['setting'] == 'import' && !$finished) $settings['setting'] = 'imported';
    if ($settings['setting'] == 'test') $settings['setting'] = 'tested';
    $settings = _user_import_save_import($settings);
    
    return $settings;
}

function _user_import_setting($settings) {

     // if existing import
     if ($settings['iid']) {
        
        $import = _user_import_select_imports($settings['iid']);

        // prevent switch from import to test
        if ($settings['setting'] == 'test' || $settings['setting'] == 'testing') {
            if ($import['setting'] == 'import' || $import['setting'] == 'imported') {
                drupal_set_message(t('Once importing has begun, cannot switch to testing.'), 'error');
                drupal_goto ('admin/settings/user_import/list');
            }
        }   
    
        // switching from testing to import
        // merge settings with import variables
        if ($settings['setting'] == 'import' && ($import['setting'] == 'test' || $import['setting'] == 'tested')) {
          
            // clear testing errors
            db_query("DELETE FROM {user_import_errors} WHERE iid = '%d'", $settings['iid']);
            
            if ($settings['first_line']) $import['first_line'] = $settings['first_line'];
            if ($settings['contact']) $import['contact'] = $settings['contact'];
            if ($settings['username_space']) $import['username_space'] = $settings['username_space'];
            if ($settings['send_email']) $import['send_email'] = $settings['send_email'];
            if ($settings['field_match']) $import['field_match'] = $settings['field_match'];
            if ($settings['roles']) $import['roles'] = $settings['roles'];    
            $import['processed'] = 0;
            $import['pointer'] = 0;
            $import['valid'] = 0;
            $import['setting'] = 'import';
            $settings = $import;
        }
     } else {
        $settings['pointer'] = 0;
        $settings['processed'] = 0;
        $settings['valid'] = 0;
    }
    
    return $settings;
}

/*
// File being used
// $import_id - use file info stored in database
// $ftp_file - chosen from FTP uploaded files
// $uploaded_file - uploaded through browser
*/
function _user_import_file($import_id = NULL, $ftp_file_selected = NULL, $uploaded_file = NULL) { 

    static $file;
    if ( !empty($file) ) return $file;
    
    // part 1 of form has been returned with file info
    if ( !empty($_SESSION['user_import']['file']) ) {       
        $file = $_SESSION['user_import']['file'];
        return $file;
    }
    
    // file was uploaded through browser
    if ( !empty($uploaded_file) ) {
        $file = file_check_upload('file');
        $file = $_SESSION['file_uploads']['file'];
        return $file;
    }
    
    // file was uploaded by FTP
    if ( !empty($ftp_file_selected) ) {    
        $ftp_files = _user_import_ftp_files();
        $filepath = drupal_get_path('module', 'user_import');
        $filename = $ftp_files[$ftp_file_selected];
        $file->filepath = "$filepath/$filename";
        $file->oldfilename = $filename;
        $file->filename = $filename;
        return $file;
    }
    
   // use file info stored in database
   if ($import_id) {
        $import = _user_import_select_imports($import_id);
        $file->filepath = $import['filepath'];
        $file->oldfilename = $import['oldfilename'];
        $file->filename = $import['filename'];
        return $file;
   }
    
    return;   
}

function _user_import_file_info($import = NULL) { 

    if ($import) {
        if (file_exists($import['filepath'])) {
            $file->filepath = $import['filepath'];
            $file->oldfilename = $import['oldfilename'];
            $file->filesize = filesize($import['filepath']);
        }
    } else {    
        $file = $_SESSION['file_uploads']['file'];
    }
    
    return $file;
}

// open file
function _user_import_file_open($file) {

    static $handle;
    if (!empty($handle)) return $handle;
    
    $handle = @fopen($file->filepath, "r");
                        
    if (!$handle) {
        form_set_error('file', t("Could not find the csv file '%filename'", array('%filename' => $file->oldfilename)), 'error');
        return t("Please add your file again.");
    }
    return $handle;
}

// get first row of file
function _user_import_file_row($file, $handle) {
    
    $data_row = @fgetcsv ($handle, 1000000, ",");
    if (!$data_row) {
        form_set_error('file', t("Could not get data, the file '%filename' is either empty or has incompatible line endings.", array('%filename' => $file->oldfilename)), 'error');
    }
    return $data_row;
}

// get info on files  uploaded via FTP
function _user_import_ftp_files() {
  
  $directory = opendir( drupal_get_path('module', 'user_import') );
  $filenames[] = t('none');
  
  while ($file = readdir($directory)) {
    if ($file != '.' && $file != '..' && $file != '.DS_Store' && $file != 'CVS' && $file != 'README.txt' && $file != 'UPDATES.txt' && $file != 'user_import.module' && $file != 'user_import.mysql') $filenames[] = $file;
  }
  
  closedir($directory);
  return $filenames;
}

// rename the file to avoid file name clashes
function _user_import_rename_file($file) {
        
    $file = file_save_upload($file);
    $old_name = $file->filename;
    $path = dirname($file->filepath);
    $new_name = 'csv_' . time() . '.txt';
    if (!rename($file->filepath, $path . '/' . $new_name)) drupal_set_message (t('File failed to properly upload'));
    $file->oldfilename = $old_name;
    $file->filename = $new_name;
    $file->filepath = $path . '/' . $new_name;
    $_SESSION['file_uploads'][$file->source] = $file;
    $import['oldfilename'] = $old_name;
    $import['filename'] = $new_name;
    $import['filepath'] = $path . '/' . $new_name;
    return $file;
}

// if saved settings have been selected: load the settings
function _user_import_saved_settings_load($import_settings_id = NULL) {

    if (empty($import_settings_id)) return;

    $import = _user_import_select_imports($import_settings_id, 'get saved');
    $import['iid'] = NULL;
    $import['import_template_id'] = $import_settings_id;
    $import['saved_settings_name'] = $import['name'];
    $import['name'] = NULL;
    
    _user_import_settings(NULL, $import);
    
    return;
}

// import settings
function _user_import_settings($settings_id = NULL, $new_values = NULL) {

    static $import_settings;
    if (!empty($new_values)) $import_settings = $new_values;
    if (!empty($import_settings)) return $import_settings;
    
    // 
    if (!empty($settings_id) && is_numeric($settings_id)) {
        $import_settings = _user_import_select_imports($settings_id);
        return $import_settings;
    }
    
    // settings template chosen on first page of form
    if (empty($settings_id) && !empty($_SESSION['user_import']['import_template_id'])) {
        $import_settings = _user_import_select_imports($_SESSION['user_import']['import_template_id']);
    }
    
    return $import_settings;
}

function user_import_session_empty() {

    unset($_SESSION["user_import"]);
    return;
}


function user_import_save_session($save) {
 session_start();

  foreach($save as $key => $value) {
    $_SESSION["user_import"][$key] = $value;
  }

  return;
}

?>